@page "/users"
@using System.Net.Http.Json
@using WeatherApp.Shared.Dtos
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Text
@inject IAuthenticationService AuthenticationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JsRuntime

@attribute [Authorize(Roles = "Admin")]

<style>
    .users-container {
        padding: 20px;
        max-width: 1200px;
        margin: 40px auto;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .form-section {
        margin-bottom: 40px;
        padding: 20px;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        background-color: #f8f9fa;
    }

        .form-section h4 {
            margin-bottom: 20px;
        }

    .btn-space {
        margin-right: 10px;
    }

    .loading-spinner {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100px;
    }

    .error-message {
        color: #dc3545;
        margin-top: 5px;
        font-size: 0.875rem;
    }

    .api-errors {
        margin-bottom: 20px;
    }

    .user-table {
        width: 100%;
        border-collapse: collapse;
    }

        .user-table th, .user-table td {
            border: 1px solid #dee2e6;
            padding: 8px;
            text-align: left;
        }

        .user-table th {
            background-color: #e9ecef;
        }

    .action-buttons button {
        margin-right: 5px;
    }
</style>

<div class="users-container">
    <button class="btn btn-secondary mb-4" @onclick="NavigateToDashboard">Back to Dashboard</button>
    <h3 class="mb-4">User Management</h3>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @successMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="form-section">
        <h4>Manage Users</h4>

        <div class="mb-3">
            <button class="btn btn-success" @onclick="ShowCreateUserModal">Create User</button>
        </div>

        @if (usersLoading)
        {
            <div class="loading-spinner">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (users != null && users.Any())
        {
            <table class="user-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Username</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th>Active</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in users)
                    {
                        <tr>
                            <td>@user.Id</td>
                            <td>@user.Username</td>
                            <td>@user.Email</td>
                            <td>@user.Role</td>
                            <td>@(user.IsActive ? "Yes" : "No")</td>
                            <td class="action-buttons">
                                <button class="btn btn-warning btn-sm" @onclick="() => ShowChangeRoleModal(user)">Change Role</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteUser(user.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No users found.</p>
        }
    </div>

    <!-- Create User Modal -->
    @if (showCreateUserModal)
    {
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Create User</h5>
                        <button type="button" class="btn-close" @onclick="CloseCreateUserModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="newUser" OnValidSubmit="CreateUser">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="newUsername" class="form-label">Username</label>
                                <InputText id="newUsername" class="form-control" @bind-Value="newUser.Username" />
                                <ValidationMessage For="@(() => newUser.Username)" />
                            </div>

                            <div class="mb-3">
                                <label for="newEmail" class="form-label">Email</label>
                                <InputText id="newEmail" type="email" class="form-control" @bind-Value="newUser.Email" />
                                <ValidationMessage For="@(() => newUser.Email)" />
                            </div>

                            <div class="mb-3">
                                <label for="newPassword" class="form-label">Password</label>
                                <InputText id="newPassword" type="password" class="form-control" @bind-Value="newUser.Password" />
                                <ValidationMessage For="@(() => newUser.Password)" />
                            </div>

                            <div class="mb-3">
                                <label for="newRole" class="form-label">Role</label>
                                <InputSelect id="newRole" class="form-control" @bind-Value="newUser.Role">
                                    <option value="">Select a role</option>
                                    <option value="Admin">Admin</option>
                                    <option value="User">User</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => newUser.Role)" />
                            </div>

                            <button type="submit" class="btn btn-primary">Create</button>
                            <button type="button" class="btn btn-secondary ms-2" @onclick="CloseCreateUserModal">Cancel</button>
                        </EditForm>
                        @if (apiValidationErrors != null && apiValidationErrors.Any())
                        {
                            <div class="alert alert-danger mt-3">
                                <ul>
                                    @foreach (var error in apiValidationErrors.Values.SelectMany(v => v))
                                    {
                                        <li>@error</li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Change Role Modal -->
    @if (showChangeRoleModal)
    {
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Change User Role</h5>
                        <button type="button" class="btn-close" @onclick="CloseChangeRoleModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="changeRoleFormModel" OnValidSubmit="ChangeUserRole">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label class="form-label">Username:</label>
                                <p>@selectedUser.Username</p>
                            </div>

                            <div class="mb-3">
                                <label for="changeRole" class="form-label">New Role</label>
                                <InputSelect id="changeRole" class="form-control" @bind-Value="changeRoleFormModel.NewRole">
                                    <option value="">Select a role</option>
                                    <option value="Admin">Admin</option>
                                    <option value="User">User</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => changeRoleFormModel.NewRole)" />
                            </div>

                            <button type="submit" class="btn btn-primary">Change Role</button>
                            <button type="button" class="btn btn-secondary ms-2" @onclick="CloseChangeRoleModal">Cancel</button>
                        </EditForm>
                        @if (apiValidationErrors != null && apiValidationErrors.Any())
                        {
                            <div class="alert alert-danger mt-3">
                                <ul>
                                    @foreach (var error in apiValidationErrors.Values.SelectMany(v => v))
                                    {
                                        <li>@error</li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string successMessage;
    private string errorMessage;
    private bool usersLoading = false;
    private bool isAdmin = false;

    // User Management
    private List<UserDto> users;
    private bool showCreateUserModal = false;
    private bool showChangeRoleModal = false;
    private UserCreateDto newUser = new();
    private UserDto selectedUser = new();

    // To store API validation errors
    private Dictionary<string, string[]> apiValidationErrors;

    // Modelo para el formulario de cambio de rol
    private ChangeRoleFormModel changeRoleFormModel = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.IsInRole("Admin");

        if (isAdmin)
        {
            await LoadUsers();
        }
    }

    private void NavigateToDashboard()
    {
        NavigationManager.NavigateTo("/dashboard");
    }

    // Métodos de Gestión de Usuarios

    private async Task LoadUsers()
    {
        usersLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            users = await Http.GetFromJsonAsync<List<UserDto>>("api/Users");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading users: {ex.Message}");
            errorMessage = "Error loading users.";
        }
        finally
        {
            usersLoading = false;
        }
    }

    private void ShowCreateUserModal()
    {
        newUser = new UserCreateDto();
        showCreateUserModal = true;
    }

    private void CloseCreateUserModal()
    {
        showCreateUserModal = false;
        apiValidationErrors = null;
    }

    private async Task CreateUser()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Users", newUser);
            if (response.IsSuccessStatusCode)
            {
                successMessage = "User created successfully.";
                CloseCreateUserModal();
                await LoadUsers();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                apiValidationErrors = await response.Content.ReadFromJsonAsync<Dictionary<string, string[]>>();
                errorMessage = "Error creating user. Please check the input fields.";
            }
            else
            {
                errorMessage = "Error creating user.";
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating user: {ex.Message}");
            errorMessage = "Error creating user.";
        }
    }

    private void ShowChangeRoleModal(UserDto user)
    {
        selectedUser = new UserDto
            {
                Id = user.Id,
                Username = user.Username,
                Email = user.Email,
                Role = user.Role,
                IsActive = user.IsActive
            };
        changeRoleFormModel = new ChangeRoleFormModel { NewRole = user.Role }; // Inicializar con el rol actual
        showChangeRoleModal = true;
    }

    private void CloseChangeRoleModal()
    {
        showChangeRoleModal = false;
        apiValidationErrors = null; // Limpiar errores al cerrar el modal
    }

    private async Task ChangeUserRole()
    {
        if (string.IsNullOrEmpty(changeRoleFormModel.NewRole))
        {
            errorMessage = "Please select a valid role.";
            return;
        }

        try
        {
            // Create a dictionary with the new role
            var newRoleData = new Dictionary<string, string>
            {
                { "NewRole", changeRoleFormModel.NewRole }
            };

            // Serialize the dictionary to JSON
            var json = JsonSerializer.Serialize(newRoleData);

            // Create the content for the PUT request
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            // Send the PUT request
            var response = await Http.PutAsync($"api/Users/{selectedUser.Id}/ChangeRole", content);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "User role updated successfully.";
                CloseChangeRoleModal();
                await LoadUsers();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                apiValidationErrors = await response.Content.ReadFromJsonAsync<Dictionary<string, string[]>>();
                errorMessage = "Error updating user role. Please check the input fields.";
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                errorMessage = "User not found.";
            }
            else
            {
                errorMessage = "Error updating user role.";
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error updating user role: {ex.Message}");
            errorMessage = "Error updating user role.";
        }
    }

    private async Task DeleteUser(int userId)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");
        if (!confirmed)
            return;

        try
        {
            var response = await Http.DeleteAsync($"api/Users/{userId}");
            if (response.IsSuccessStatusCode)
            {
                successMessage = "User deleted successfully.";
                await LoadUsers();
            }
            else
            {
                errorMessage = "Error deleting user.";
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting user: {ex.Message}");
            errorMessage = "Error deleting user.";
        }
    }

    // Clase de modelo para el formulario de cambio de rol
    public class ChangeRoleFormModel
    {
        [Required(ErrorMessage = "Please select a role.")]
        public string NewRole { get; set; }
    }
}
